File Geometry.cpp

#pragma once
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

class Geometry {
public:
	virtual double perimeter() = 0;
	virtual double area() = 0;
	virtual void display()
	{
		cout << "Perimeter: " << perimeter() << endl;
		cout << "Area: " << area() << endl;
	}
};



Lớp Traingle.cpp

#pragma once
#include "Geometry.cpp"
class Traingle : public Geometry {
private:
	int a;
	int b;
	int c;
public:
	Traingle() {}
	Traingle(int a, int b, int c) : a(a), b(b), c(c) {}
	double perimeter()
	{
		return a + b + c;
	}
	double area()
	{
		double p = (a + b + c) / 2.0;
		return sqrt(p * (p - a) * (p - b) * (p - c));
	}
};



Lớp Rectangle.cpp

#pragma once
#include "Geometry.cpp"
class Rectangle : public Geometry {
private:
	int w;
	int h;
public:
	double perimeter() {
		return (w + h) * 2;
	}
    Rectangle(int w, int h): w(w), h(h) {}
	double area()
	{
		return w * h;
	}
};




Lớp Circle.cpp

#pragma once
#include "Geometry.cpp"
class Circle :public Geometry {
private:
	int r;
public:
	Circle() {}
	Circle(int r) :r(r) {}
	double perimeter()
	{
		return 2 * 3.14 * r;
	}
	double area()
	{
		return 3.14 * r * r;
	}
};
